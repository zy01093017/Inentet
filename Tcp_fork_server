#include <stdio.h>
#include <unistd.h>
#include <sys/socket.h>
#include <netinet/in.h>
#include <arpa/inet.h>
#include <sys/types.h>
#include <stdlib.h>
#include <string.h>


// ./server  ip  port
int main(int argc, char* argv[])
{
    if(argc != 3){
        printf("Usage ./server [ip] [port]\n");
        return 1;
    }

    //创建套接字
    int sockfd = socket(AF_INET, SOCK_STREAM, 0);
    if(sockfd < 0){
        perror("socket");
        return 2;
    }

    //绑定端口号
    struct sockaddr_in server;
    server.sin_family = AF_INET;
    server.sin_addr.s_addr = inet_addr(argv[1]);
    server.sin_port = htons(atoi(argv[2]));

    if(bind(sockfd, (struct sockaddr*)&server, sizeof(server)) < 0){//绑定失败
        perror("bind");
        return 3;
    }

    //监听
    if(listen(sockfd, 5) < 0){
        perror("listen");
        return 4;
    }

    struct sockaddr_in client;//用于接收到客户端的ip和端口号
    socklen_t len = sizeof(client);

    char buf[128];
    for(;;){//服务器一直运行

        int clientfd = accept(sockfd, (struct sockaddr*)&client, &len);
        if(clientfd < 0){//当没有接收到客户端，尝试重新接受
            perror("accept");
            continue;
        }

        printf("Get connet [%s] [%d]\n",inet_ntoa(client.sin_addr), ntohs(client.sin_port));

        pid_t pid = fork();
        if(pid == 0){//子进程创建孙子进程，然后退出
            if( fork() == 0){//创建的子进程，去处理客户端发送过来的消息

                //1.从客户端接受消息，在将其发送回去
                while(1){//子进程不断从客户端读数据，在将其发回去
                    ssize_t  s = recv(clientfd, buf, sizeof(buf)-1, 0);
                    if(s > 0){
                        buf[s] = 0;
                        printf("client# %s\n",buf);

                        ssize_t ret = send(clientfd, buf, strlen(buf), 0);
                        if(ret < 0){
                            perror("send");
                            return 1;
                        }
                    }
                    else if(s == 0){//客户端退出
                        printf("client quit...\n");
                        break;
                    }
                    else{
                        break;
                    }
                }
                exit(0);//自己退出
            }
            else if(pid > 0){//回收子进程，继续监听有没有客户端
                waitpid(pid, NULL, 0);
                close(clientfd);
            }
        }
    }
    return 0;
}
