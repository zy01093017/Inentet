#include <stdio.h>
#include <unistd.h>
#include <sys/socket.h>
#include <arpa/inet.h>
#include <arpa/inet.h>
#include <string.h>


//端口号的绑定，1025 - 65535 1-1024 是预留给操作系统的端口号
// ./srever IP地址 端口号（随意指定,不能被其他进程占用）
int main(int argc,char* argv[])
{

    /*以下代码相当于服务器启动时的准备工作*/
    if(argc != 3){//进程 ip地址, 端口号
        printf("Usage ./server [ip] [port]\n");
        return 1;//退出码,表示程序跑完,结果出错
    }
    int fd = socket(AF_INET,SOCK_DGRAM,0);//1.哪个协议族，面向数据报
    if(fd < 0){//文件描述符被占用,出错;一个进程的文件描述符最多为ulimit -a
        perror("socket");
        return 2;
    }
    
    struct sockaddr_in addr;
    addr.sin_family = AF_INET;//协议族
    addr.sin_addr.s_addr = inet_addr(argv[1]);//将10进制IP地址转换成unint_32ip
    addr.sin_port = htons(atoi(argv[2]));//将端口号转成整数，在将其转成字节序
    
    //将文件描述符进行绑定,其实是将端口号绑定
    int ret = bind(fd,(struct sockaddr*)&addr,sizeof(addr));//指针强转
    if(ret < 0){//如果端口号被其他进程占用，会失败
        perror("bind");
        return 3;
    }
    
    while(1){//服务器一旦启动，不会进行退出，会一直运行下去，为了反复的从客户端接受数据，处理数据，向客户端返回数据
        struct sockaddr_in peer;//结构体，里面存着对应端的ip和端口号（这里指源ip和源端口号）
        socklen_t len = sizeof(peer);//相当于缓冲区的长度,输入输出型的参数（理论上没有变化）
        char buf[1024] = {0};
    
        ssize_t read_size = recvfrom(fd, buf, sizeof(buf)-1, 0,
        (struct sockaddr*)&peer,&len);//缓冲区的大小预留一个字节，用来结束字符串\0，sockaddr* src_addr是输出型参数，一旦从客户端返回，就可以拿到客户端的ip地址和端口号（源ip，源端口号）
    
        if(read_size < 0){//说明执行失败，当服务器执行失败后，尝试下一次的拿数据
            perror("recvfrom");
            continue;
        }
       buf[read_size] = '\0';//返回值表示读到多少字节
       //a -> ascii
       printf("client %s: %d  say: %s\n",
       inet_ntoa(peer.sin_addr), ntohs(peer.sin_port), buf);
    
       //将收到的数据发给哪个socket，发的数据在哪里，要发给哪个端口号,这里指刚才接收到的源ip和源端口号
       sendto(fd, buf, strlen(buf), 0, (struct sockaddr*)&peer,len);//将收到的数据返回给客户端
    }
    close(fd);//一般执行不到
    return 0;
}
